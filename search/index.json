[{"content":"起因 原博客 rainsimon.top 建立于 2020年 3月，但 9月后再无更新了\n \n偶然间看别人的用 Hugo 构建博客,于是时隔一年才有了本站的产生。\n经过 开始折腾 1、搭建服务  根据官方文档快速上手：QuickStart 本博客采用的主题：Stack 主题的配置及使用指南：参考文档  2、遇到的问题 2.1 什么是 Open Graph 标签 在主题的配置文件中有一行 opengraph, 并不了解这是做什么的\n Open Graph Protocol（开放图谱协议），简称 OG 协议或 OGP。它是 Facebook 在 2010 年 F8 开发者大会公布的一种网页元信息（Meta Information）标记协议，属于 Meta Tag （Meta 标签）的范畴，是一种为社交分享而生的 Meta 标签。\n 根据以上内容可以断定，是为了优化SEO，并且是针对社交平台的优化。 带有OG标签的内容分享后的效果也比不带的好 会展示缩略图 。\n2.2 什么是 Front-Matter 1 2 3 4 5 6  --- title: tags date: 2019-08-13 09:39:50 type: tags layout: tag ---   Front-Matter 就是.md文件最上面的这部分内容,具体介绍参考这部分内容：front-matter 使用详解\n2.3 如何查看访问量 本博客使用了不蒜子网页计数器，可查看文档解锁更多打开方式。\n食用方式\n 在 theme\\{{your_theme}}\\layouts\\partials\\article\\components 文件夹下找到 footer.html 文件 插入以下代码便可达到与本博客一致的样式 1 2 3 4 5  \u0026lt;section class=\u0026#34;article-views\u0026#34;\u0026gt; {{ partial \u0026#34;helper/icon\u0026#34; \u0026#34;views\u0026#34; }} \u0026lt;span id=\u0026#34;busuanzi_value_page_pv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;span\u0026gt;\u0026amp;nbsp;\u0026amp;nbsp;views\u0026lt;/span\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;script async src=\u0026#34;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;   备注：article-views 类属性需要你在 assets\\img 文件下有一个名为 views.svg 的图片文件\n  2.4 MarkDown 中写 HTML 标签不生效 目前已知的问题：在本博客原生的 MarkDown 文件中编写HTML标签会被忽略\n这在常见的 MarkDown 语法中并不符合正常逻辑，猜测是模版引擎转译时忽略了\n搜了一圈发现 Hugo 官方手册有提及关于 MarkDown 渲染的配置，具体文档\n在 config.yaml 中加入以下内容即可，你也可以根据文档配置其他内容\n1 2 3 4  markup: goldmark: renderer: unsafe: true   2.5 开启代码显示行号功能 hugo的版本需要v0.60.0以上\n实现的方式很简单，只要修改 config.yaml 文件即可\n1 2 3 4 5 6 7 8 9 10 11  markup: highlight: codeFences: true guessSyntax: true hl_Lines: \u0026#34;\u0026#34; lineNoStart: 1 lineNos: true lineNumbersInTable: true noClasses: true style: dracula tabWidth: 4   2.6 如何开启 RSS 博客默认自带 RSS 地址，如果你有使用 RSSHub Radar 这个谷歌插件，那么当你进入博客就可以看到订阅地址。\n2.7 如何编写博客文章 你只需要按照 Markdown 的格式编写自己的文章，让后将写好的文章放在博客根目录/content/posts， hugo 就会读取到这片文章，并将这片文章展示在比的博客中。\n与普通Markdown 文章不一样的地方是，你需要在文章的开头写入如下结构的内容，这些内容包含在三杠线之间，在三杠线下边就是Markdown 的正文了：\n1 2 3 4 5 6 7 8 9 10 11 12  --- title: \u0026#34;测试文章\u0026#34; description: \u0026#34;文章简介\u0026#34; date: \u0026#34;2020-08-10 01:00:00+0200\u0026#34; slug: \u0026#34;test-post\u0026#34; image: \u0026#34;cover.jpg\u0026#34; categories: - 博客 tags: - Hugo - Stack ---   其中 content文件夹下有三个文件夹分别是 categories（存放分类）、page（存放其它页面）、post（存放文章）\n打包部署 打包 输入命令 hugo -D 即可构建写好的文章打包\n搭建部署 因为每个人的部署方式各有不同，有的人直接丢服务器，有的人直接上 GitHub Pages\n搭建  域名:如果你想 别人通过域名的 whois 无法查找你个人的任何信息，可以购买来自于 namesilo 域名 服务器: 我选择的是GitHub Pages，这边看个人的喜好，国外的服务器和域名能够免备案。  部署 这部分内容主要是命令清单，搭建在 Github 上，其中第五行和第十行替换成自己的 Github 地址即可\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  hugo new site myblog git clone https://github.com/hfge/hugo-theme-stack/ themes/hugo-theme-stack hugo server -t hugo-agency-theme --buildDrafts hugo new content/post/blog.md hugo --theme=hugo-theme-stack --baseUrl=\u0026#34;https://simonhux.github.io/\u0026#34; --buildDrafts cd public git init git add . git commit -m \u0026#34;我的 hugo 博客第一次提交\u0026#34; git remote add origin https://github.com/SimonHux/simonhux.github.io.git git push -u origin master   如何更新  终端或 VS code 打开博客根目录 输入 hugo server 检查将要更新的博客，看看是否有需要修改的地方 按住 Ctrl+C 结束运行 输入 hugo 初始化博客，生成的public文档将覆盖原有的public文档 输入 cd public 进入public文档 相继输入以下代码  1 2 3  git add -A git commit -m \u0026#34;xxxx\u0026#34; git push -f origin master   未完待续\u0026hellip; ","date":"2021-03-31T00:00:00Z","image":"https://simonhux.com/p/%E6%9C%AC%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%8A%98%E8%85%BE%E5%8F%B2/blog_hue19c6435f8a0c76b54223e2e5ceafd42_542753_120x120_fill_box_smart1_2.png","permalink":"https://simonhux.com/p/%E6%9C%AC%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%8A%98%E8%85%BE%E5%8F%B2/","title":"本博客的折腾史"},{"content":"开发环境 下载 下载地址 Go官网下载地址：https://golang.org/dl/\nGo官方镜像站（推荐）：https://golang.google.cn/dl/\n版本的选择 Windows 平台和 Mac 平台推荐下载可执行文件版，Linux 平台下载压缩文件版。\n安装 Windows 下安装 此安装实例以 64位 Win10系统安装 Go 1.15.1可执行文件版本为例。\n将上一步选好的安装包下载到本地。\n双击下载好的文件，然后按照下图的步骤安装即可。\nLinux 下安装 我们在版本选择页面选择并下载好go1.15.1.linux-amd64.tar.gz文件：\n1  curl -O https://studygolang.com/dl/golang/go1.15.linux-amd64.tar.gz   将下载好的文件解压到/usr/local目录下：\n1  sudo tar -C /usr/local -xzf go1.15.linux-amd64.tar.gz # 解压   配置环境变量： Linux下有两个文件可以配置环境变量\n其中/etc/profile是对所有用户生效的；$HOME/.profile是对当前用户生效的，根据自己的情况自行选择一个文件打开，添加如下两行代码，保存退出。\n1 2  export GOROOT=/usr/local/go export PATH=$PATH:$GOROOT/bin   修改/etc/profile后要重启生效，修改$HOME/.profile后使用source命令加载$HOME/.profile文件即可生效。 检查：\n1 2  ~ go version go version go1.15.1 linux/amd65   Mac 下安装 下载可执行文件版，直接点击下一步安装即可，默认会将go安装到/usr/local/go目录下。\n检查 上一步安装过程执行完毕后，可以打开 Cmd 或 Windows Terminal，输入go version命令，查看安装的 Go 版本。\nGOROOT 和 GOPATH GOROOT和GOPATH都是环境变量，其中GOROOT是我们安装 Go 开发包的路径，GOPATH 是 Go语言中提供项目的工作目录。而从 Go 1.8版本开始，Go 开发包在安装完成后会为GOPATH设置一个默认目录，参见下表。\nGOPATH 在不同操作系统平台上的默认值\n   平台 GOPATH默认值 举例     Windows %USERPROFILE%/go C:\\Users\\用户名\\go   Unix $HOME/go /home/用户名/go    可以通过以下方法查看默认的GOPATH目录：\n一默认情况下 GOROOT下的bin目录及GOPATH下的bin目录都已经添加到环境变量中了，我们也不需要额外配置了。如果检查那一步不能正常显示go的版本，那么我们还得自己配置环境变量\n假如go的安装目录是C:\\Go，那么我们要把C:\\Go\\bin添加到PATH系统变量里\n修改GOPATH目录 删除用户变量的GOPATH\n在系统变量下重新定义GOPATH目录，如下图所示\nGOPROXY Go1.14 版本之后，都推荐使用go mod模式来管理依赖环境了，也不再强制我们把代码必须写在GOPATH下面的src目录了，你可以在你电脑的任意位置编写 Go 代码。（网上有些教程适用于1.11版本之前。）\n默认 GoPROXY 配置是：GOPROXY=https://proxy.golang.org,direct，由于国内访问不到https://proxy.golang.org，所以我们需要换一个PROXY，这里推荐使用https://goproxy.io或https://goproxy.cn。\n可以执行下面的命令修改 GOPROXY ：\n1 2  go env -w GO111MODULE=on go env -w GOPROXY=https://goproxy.cn,direct   可用 go env 命令查看是否修改成功（此命令也查看自己的GOPATH路径以及GOROOT路径）\nGo 项目结构 在进行Go语言开发的时候，我们的代码总是会保存在$GOPATH/src目录下。在工程经过go build、go install或go get等指令后，会将下载的第三方包源代码文件放在$GOPATH/src目录下， 产生的二进制可执行文件放在 $GOPATH/bin目录下，生成的中间缓存文件会被保存在 $GOPATH/pkg 下。\n如果我们使用版本管理工具（Version Control System，VCS。常用如Git）来管理我们的项目代码时，我们只需要添加$GOPATH/src目录的源代码即可。bin 和 pkg 目录的内容无需版本控制。\n适合个人开发者 我们知道源代码都是存放在GOPATH的src目录下，那我们可以按照下图来组织我们的代码。\n目前流行的项目结构 Go语言中也是通过包来组织代码文件，我们可以引用别人的包也可以发布自己的包，但是为了防止不同包的项目名冲突，我们通常使用顶级域名来作为包名的前缀，这样就不担心项目名冲突的问题了。\n因为不是每个个人开发者都拥有自己的顶级域名，所以目前流行的方式是使用个人的github用户名来区分不同的包。\n举个例子：张三和李四都有一个名叫studygo的项目，那么这两个包的路径就会是：\n1  import \u0026amp;quot;github.com/zhangsan/studygo\u0026amp;quot;   和\n1  import \u0026amp;quot;github.com/lisi/studygo\u0026amp;quot;   以后我们从github上下载别人包的时候，如：\n1  Copygo get github.com/jmoiron/sqlx   那么，这个包会下载到我们本地GOPATH目录下的src/github.com/jmoiron/sqlx。\n适合企业开发者 Go 开发编辑器 Go 采用的是 UTF-8 编码的文本文件存放源代码，理论上使用任何一款文本编辑器都可以做 Go 语言开发，这里推荐使用VS Code和Goland。 VS Code是微软开源的编辑器，而Goland是 Jetbrains 出品的付费IDE。\n我们这里使用VS Code加插件做为 Go 语言的开发工具，虽然不如某些 IDE 功能强大，但是它添加 Go 扩展插件后已经足够胜任我们日常的 Go 开发\n下载与安装 VS Code官方下载地址：https://code.visualstudio.com/Download\n三大主流平台都支持，请根据自己的电脑平台选择对应的安装包。\n双击下载好的安装文件，双击安装即可。\n配置 进入Extensions后直接搜索 go，安装即可。中文界面搜chinese，也建议安装上 Code Runner 能直接运行 Go\n安装 Go 的依赖包 在Go语言开发的时候为我们提供诸如代码提示、代码自动补全等功能。\nWindows平台按下Ctrl+Shift+P，Mac平台按Command+Shift+P，这个时候VS Code界面会弹出一个输入框，如下图：\n输入go:install，下面会自动搜索相关命令，我们选择Go:Install/Update Tools这个命令\n选中并会回车执行该命令（或者使用鼠标点击该命令）,全选\n安装成功，如下图所示:\n第一个Go程序 现在我们来创建第一个Go项目——hello。在我们的GOPATH下的src目录中创建hello目录。\n在该目录中创建一个main.go文件：\n1 2 3 4 5 6 7  package main // 声明 main 包，表明当前是一个可执行程序  import \u0026#34;fmt\u0026#34; // 导入内置 fmt 包  func main(){ // main函数，是程序执行的入口 \tfmt.Println(\u0026#34;Hello World!\u0026#34;) // 在终端打印 Hello World! }   运行 点击三角形，运行\ngo build go build表示将源代码编译成可执行文件。\n在hello目录下执行：\n1  go build   或者在其他目录执行以下命令：\n1  go build hello   go编译器会去 GOPATH的src目录下查找你要编译的hello项目\n编译得到的可执行文件会保存在执行编译命令的当前目录下，如果是 windows 平台会在当前目录下找到hello.exe可执行文件。\n可在终端直接执行该hello.exe文件：\n1 2  E:\\Project\\Go\\src\\hello\u0026gt;hello.exe Hello World!   我们还可以使用-o参数来指定编译后得到的可执行文件的名字。\n1  go build -o heiheihei.exe   go install go install表示安装的意思，它先编译源代码得到可执行文件，然后将可执行文件移动到GOPATH的bin目录下。因为我们的环境变量中配置了GOPATH下的bin目录，所以我们就可以在任意地方直接执行可执行文件了。\n跨平台编译 默认我们go build的可执行文件都是当前操作系统可执行的文件，如果我想在 windows 下编译一个 linux 下可执行文件，那需要怎么做呢？\n只需要指定目标操作系统的平台和处理器架构即可：\n1 2 3  SET CGO_ENABLED=0 // 禁用CGO SET GOOS=linux // 目标平台是linux SET GOARCH=amd64 // 目标处理器架构是amd64   使用了 cgo 的代码是不支持跨平台编译的\n然后再执行go build命令，得到的就是能够在Linux平台运行的可执行文件了。\nMac 下编译 Linux 和 Windows 平台 64位 可执行程序：\n1 2  CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build   Linux 下编译 Mac 和 Windows 平台64位可执行程序：\n1 2  CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build   Windows 下编译 Mac 平台64位可执行程序：\n1 2 3 4  SET CGO_ENABLED=0 SET GOOS=darwin SET GOARCH=amd64 go build   现在，开启你的 Go 语言学习之旅吧。\n","date":"2020-09-09T00:00:00Z","image":"https://simonhux.com/p/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA-go-%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/bg_hu1e6810f2c6f930ded1a614a1ac0ed972_28622_120x120_fill_box_smart1_2.png","permalink":"https://simonhux.com/p/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA-go-%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/","title":"从零开始搭建 Go 语言开发环境"},{"content":"谁是曹政？ 冯大辉说(知乎)：\n 认识曹政之后，感觉互联网终于入门了 :) 数据、技术、业务，无一不精。我的偶像。\n 曹政的知识星球 除了微信公众号，caoz还在另外两个渠道分享一些在公众号里面不方便说的话题：\n曹政的电报群telegram\n曹政公众号文章： 为了方便研读与学习，将“caoz 的梦呓”（微信号：caozsay）公众号里面的所有文章整理成目录：\n 【2017-12-22】听说有人谋求稳定的工作？ 【2017-12-19】谈谈共识算法 【2017-12-16】如何快速有效阅读 【2017-12-13】区块链装逼指南 【2017-12-11】谈谈产品与运营之 - 润物细无声 【2017-12-08】合规羊毛党小贴士，谈谈award caculator 【2017-12-04】走马观花看印尼 【2017-12-02】有些钱，即便不脏，但也有毒。 【2017-11-30】所谓”看棋高三段” 【2017-11-27】谈谈赚钱的套路 - 敏锐，决断及行动 【2017-11-23】感谢一路有你 【2017-11-20】面具之下的真相 【2017-11-18】分享即学习 【2017-11-15】谈谈比特币分叉 【2017-11-14】谈谈特权用户 【2017-11-10】谈谈企业福利 【2017-11-07】游戏是怎么赚钱的 - 迫不及待 【2017-11-04】从“自相矛盾”的一些问题来谈谈认知 【2017-11-01】谈谈产品与运营之 - 什么是用户感知 【2017-10-27】谈谈赚钱的套路 - 消费冲动与消费信心。 【2017-10-25】企业面试需要几轮 【2017-10-23】关于Alphago zero，是的，我来跟风了 【2017-10-21】巨头垄断下的创业机会 【2017-10-18】面对学习，心存敬畏 【2017-10-16】人生的选择题和证明题 【2017-10-13】创业与投资 -谈谈融资这个事儿（下） 【2017-10-09】创业与投资 - 谈谈融资这个事儿（上） 【2017-10-05】共享经济的黄昏 【2017-10-03】不是所有成功都值得尊重 【2017-09-29】谈谈免费开源的知识产权话题 【2017-09-27】当我们谈战略，我们究竟在谈什么？ 【2017-09-23】创业者的噩梦 -商业竞争究竟有多残酷和黑暗 【2017-09-20】有些答案，写出来其实蛮简单。 【2017-09-17】霸王条款，新浪你担得起责么？ 【2017-09-15】你还在寻找解决方案，别人已经颠覆了问题。 【2017-09-14】从大企业常见的自嗨谈起 【2017-09-12】我们都缺了一门必修课 【2017-09-09】到底什么是割韭菜 【2017-09-07】从一个独角兽的诞生说起 【2017-09-05】关于UGC的数据隐私和所有权 【2017-09-03】广告投手的江湖 【2017-08-30】小程序的红利期 【2017-08-29】共识即财富 【2017-08-26】负成本营销 【2017-08-24】从权力的游戏谈用户画像 【2017-08-21】谈谈移民这点事 【2017-08-20】阿法狗之后的围棋世界 【2017-08-17】谈谈用户画像 【2017-08-15】割不完的韭菜 【2017-08-13】你会清理联系人么？ 【2017-08-10】致那些“聪明”的读者 【2017-08-09】你相信大爱无疆么？ 【2017-08-06】手机是用来干嘛的？ 【2017-08-04】好好说话 【2017-08-02】怎么发现赚钱的套路 【2017-07-31】谈谈赌博的套路 【2017-07-29】关于知识付费，是的，我就是来砸场子的。 【2017-07-26】小密圈因技术原因暂停服务 【2017-07-24】谈谈用户体验与风控的平衡性 【2017-07-21】江湖人称破锣糕 【2017-07-19】扼杀创业的理想主义 【2017-07-17】见微知著，从小需求里看产品的抉择和定位 【2017-07-14】我的第一堂正式网课 【2017-07-11】天使投资，众筹与项目背书 【2017-07-10】如何管理和指挥你的上司 【2017-07-07】这是一篇广告，只限技术人员浏览 【2017-07-06】再谈创业者的价值观 【2017-07-04】谈谈消费升级 【2017-07-02】从技术到管理 【2017-07-01】读书笔记，满篇心理学家的吐槽 【2017-06-28】前人挖坑，后人仆街 【2017-06-13】封笔两周保平安 【2017-06-08】暴走欧洲之 为信仰买单 【2017-06-07】从校园到职场 - 技能与职位 【2017-06-05】一个羊毛党的自白 【2017-06-03】alphago 50盘自战棋谱的简单解读 【2017-06-01】互联网世界的神奇逻辑 【2017-05-31】暴走欧洲之文明的迭代 【2017-05-30】从大数据+AI 谈谈概念与场景 【2017-05-27】暴走欧洲之旅行的经验杂记 【2017-05-24】是的，柯洁输了，然而又怎样。 【2017-05-23】比输更可怕，写在人机大战之前 【2017-05-21】暴走欧洲之在德国的反思 【2017-05-19】暴走欧洲之流水账 【2017-05-15】信息安全，别为了芝麻丢了西瓜。 【2017-05-10】系统优化的前提是应用场景 【2017-05-09】从空空狐谈信用卡套利 【2017-05-07】中东出海浅谈 【2017-05-05】走马观花看迪拜 【2017-04-30】谈谈社区的用户增长 【2017-04-28】谈谈编程 之 滥用内存的现象 【2017-04-25】当我们追求不可替代。。。 【2017-04-23】我知道你不想交智商税 【2017-04-20】创业者的噩梦 - 人与人的信任呢？ 【2017-04-19】微信赞赏与苹果税 【2017-04-18】该来的总会来 - 谈谈小程序的这次升级 【2017-04-17】创业者的噩梦 - 该我的钱怎么拿不到？ 【2017-04-15】高危！新一波Windows 0day攻击泄露. 【2017-04-13】在薅流量之前，我们先谈点别的。 【2017-04-11】编程的一些小习惯 【2017-04-09】吐槽一下国泰航空 【2017-04-07】所谓数据驱动，这个锅技术不能背。 【2017-04-05】警惕那些让你ALL IN的人 【2017-04-03】生财有术，15天，狂敛50万，付费社群实战分享 【2017-04-02】微观经济学 读书笔记 【2017-03-31】创业者的噩梦 - 怎么就侵权了 【2017-03-29】名人耍大牌，怎么破？ 【2017-03-27】谈谈微信公众号的交易价值 【2017-03-24】划重点，少妇才是关键！ 【2017-03-22】我讲个故事，你怎么理解？ 【2017-03-19】原生态创业者，及社交想象力 【2017-03-18】我的小密圈运营报告 【2017-03-14】赠人玫瑰，手有余香 【2017-03-12】Google关键词挖掘细分市场实战案例 【2017-03-10】为国拓疆孰为不易 【2017-03-08】真知识，也会成为毒药 【2017-03-05】影响力阶级 【2017-03-04】给我的偷懒找点借口 【2017-03-01】流量技巧与内容本质 【2017-02-27】与微信公众平台的商榷 【2017-02-25】内容，信息与知识 【2017-02-24】谈谈股权/期权协议 【2017-02-22】绑架式创业 【2017-02-20】从跨境电商方向选择谈起 【2017-02-18】caoz的小密圈 【2017-02-17】职场通病之 - 眼里揉不得沙子 【2017-02-15】一路通，路路通 【2017-02-13】流量运营，从入门到精通 【2017-02-12】再谈大V的套路 【2017-02-09】职场通病之 - 高不成，低不就的尴尬 【2017-02-06】看不见的竞争 带宽优化 【2017-02-03】没有捷径！没有捷径！没有捷径！ 【2017-02-02】看不见的竞争 之 把握意见领袖 【2017-01-31】谈谈财务自由 【2017-01-29】看不见的竞争 文件和数据压缩 【2017-01-28】视野与执行力 【2017-01-25】留给春节的作业 【2017-01-23】[重发]一年之计在于春 【2017-01-21】小年夜的碎碎念 【2017-01-18】谈谈创业这点事之 单点突破 【2017-01-16】你被凤姐套路了么？ 【2017-01-15】好话，真话，正确的话，你想听哪个？ 【2017-01-12】从校园霸凌到职场骚扰 【2017-01-10】别怕人家占你便宜 【2017-01-09】空手套白狼，放端套利 【2017-01-08】那些用力过猛的员工 【2017-01-06】挖矿是个啥生意 【2017-01-05】Google到底做了啥 【2017-01-04】我的跨年趴 【2016-12-31】向90后学习 【2016-12-28】以爱国为名 【2016-12-26】关于质疑精神 【2016-12-23】所谓的干货满满，所谓的勤学不辍 【2016-12-17】大学生创业实战 - 代充的套利故事 【2016-12-16】AI是一场革命，不要笑，我是认真的。 【2016-12-14】【科普】自充是个什么鬼 【2016-12-12】【科普】搜索引擎的工作原理 【2016-12-11】全球化的误区，本地化的机会 【2016-12-08】知识分享，红利期还有多久 【2016-12-07】数字交易所，人傻，钱多，速来 【2016-12-06】扒扒当年网易的时运 【2016-12-05】有些东西，你学不来的 【2016-12-04】常见的媒体误读 【2016-12-01】中国IT技术人员，是否适合新加坡发展 【2016-11-30】你在看热闹，别人在捡钱 【2016-11-28】从一头卖出27万的猪说起 【2016-11-25】出了bug怎么办 【2016-11-23】谈谈科学的本质 【2016-11-21】如何做好创业公司CEO - 量力而行 【2016-11-17】谈谈主动工作 【2016-11-15】聊聊双十一和电商的盈利困境 【2016-11-13】这个锅不该川普背 【2016-11-12】谈谈产品和运营之 - 什么是用户预期 【2016-11-10】新加坡的技术创新与投资 【2016-11-08】从吃瓜群众到海盗党 【2016-11-07】再谈东南亚创业环境 【2016-11-05】东南亚电商创业环境 【2016-11-03】谈谈容错性 【2016-11-01】从新加坡谈政策和管理 【2016-10-29】进击的OPPO 【2016-10-27】创业者的噩梦 - 明明我先想到的 【2016-10-24】别用嘴炮救国 【2016-10-20】南洋生活，聊聊新加坡的房地产 【2016-10-19】AI时代 【2016-10-17】政府信用与创业 【2016-10-14】大公司背景的人创业困境 【2016-10-12】创业者的噩梦 - 为什么没人能帮忙。 【2016-10-08】mysql系统分析实战分享 【2016-10-04】推荐算法，机器学习，会将我们带向何方？ 【2016-10-02】断崖式下跌 - 创业者的噩梦 【2016-09-29】跨界的魅力 【2016-09-27】微信小程序的盛宴，你真的准备好了？ 【2016-09-25】airbnb中国到底行不行 【2016-09-20】谈谈帐期 【2016-09-16】常识与现实 【2016-09-14】月饼门，郭德纲，价值观 【2016-09-12】谈谈用户筛选 【2016-09-08】谈谈创业与人性 【2016-09-05】不学点坏，怎么做好人 【2016-09-03】那些倍受好评的烂文 【2016-09-01】高价值信息圈的潜规则 【2016-08-30】大佬们的智囊团 【2016-08-29】所谓资本寒冬，不过是一厢情愿的破灭 【2016-08-26】谈谈冯大辉与丁香园 【2016-08-25】从Disucz能学到什么 【2016-08-24】怀才不遇？醒醒吧。 【2016-08-22】体制 【2016-08-18】歧视 【2016-08-16】浅薄 【2016-08-08】浅谈领导力之 - 价值决策 【2016-08-06】谢谢您看得起我 【2016-08-05】没有乌云，天就一定晴了么 【2016-08-04】游戏是怎么赚钱的 - 回归好玩 【2016-08-02】其实，我也是个运维 【2016-07-31】创业与投资 - 别沉浸于 to vc 【2016-07-23】傲慢与偏见之 - 轮到我们领先了 【2016-07-21】浅谈领导力 适度冲突与权衡 【2016-07-16】从南海到南洋 【2016-07-14】谈谈有价值的社交 【2016-07-10】正版缺阵，山寨称王 【2016-07-08】德国黑科技的神话与常识 【2016-07-06】谈谈创业这点事 之 时间窗口 【2016-07-04】谈谈广电的游戏新政 【2016-07-03】如何进行一次很low的speech。 【2016-06-30】谈谈共享经济 【2016-06-27】谈谈企业控制权之争 【2016-06-25】不得贪胜 【2016-06-22】公务舱攻略 【2016-06-17】再谈信用的价值 【2016-06-14】信用的价值 【2016-06-13】教不来与学不会 【2016-06-10】以创业的名义 【2016-06-06】以知识分享为幌子 【2016-06-04】流量的攻与防 【2016-06-01】不干扰就是一种用户体验 【2016-05-28】流量的旅行之路 【2016-05-25】谈谈创业这点事 专业的盲区 【2016-05-22】谈谈创业这点事之 流量的价值 【2016-05-20】谈谈创业这点事 之 如何界定可行性 【2016-05-17】从受众目标，再谈过犹不及 【2016-05-15】从反反鸡汤谈过犹不及 【2016-05-11】再谈万恶的kpi 【2016-05-09】万恶的kpi 【2016-05-07】谈谈激励的原则 【2016-05-05】宣泄，还是逻辑 【2016-04-28】傲慢与偏见之 - 山寨与创新 【2016-04-27】傲慢与偏见之 - 因果倒置的锦上添花 【2016-04-26】傲慢与偏见之 - 防火墙与竞争力 【2016-04-25】傲慢与偏见之 - 谷歌中国逆袭史 【2016-04-24】处处皆黑客 【2016-04-22】谈谈背景调查 【2016-04-19】邪恶的正能量 【2016-04-18】开脑洞的套利骗局 【2016-04-17】狼，兔子，激励 【2016-04-14】商业价值的逻辑 【2016-04-13】小国崛起 - 谈谈东南亚的未来（下） 【2016-04-11】小国崛起 - 谈谈东南亚的未来（上） 【2016-04-07】谈谈域名这点事 【2016-04-05】谈谈与平台合作的逻辑 【2016-04-03】从值乎谈执行力 【2016-04-01】摆事实，讲歪理 【2016-03-31】黑客的背后 【2016-03-30】谈谈基因的黑科技 - 抛砖引玉篇 【2016-03-28】看不懂的世界 【2016-03-27】变坏其实很容易 【2016-03-26】从”递弱代偿”说起 【2016-03-25】谈谈品牌（下） 【2016-03-23】为政治正确埋单 【2016-03-22】谈谈品牌（上） 【2016-03-21】谈谈papi酱的价值 【2016-03-20】流行与经典 【2016-03-18】谈谈李一男 【2016-03-17】边界与底线 【2016-03-16】无题 【2016-03-14】深度学习并非最优方案 【2016-03-13】毁灭你，与你何干 【2016-03-11】如何正确的勾搭大V 【2016-03-09】自信，还是故步自封 【2016-03-08】新时代的大跃进 【2016-03-07】谈谈大V - 关于影响力 【2016-03-05】关于判断力 - 正视事实是基础 【2016-03-03】游戏是怎么赚钱的 - 聊聊黑产 【2016-03-02】游戏是怎么赚钱的 - 聊聊技术 【2016-02-28】游戏是怎么赚钱的 - 聊聊留存 【2016-02-27】游戏是怎么赚钱的 - 聊聊挖坑 【2016-02-25】游戏是怎么赚钱的 - 聊聊山寨与混搭 【2016-02-23】创业者的技能树 -下篇 【2016-02-20】支付，不仅仅是支付 【2016-02-18】创业者的技能树 - 中篇 【2016-02-17】创业者的技能树 -上篇 【2016-02-16】视界不同，世界不同 【2016-02-14】游戏是怎么赚钱的 - 进阶篇 【2016-02-13】游戏是怎么赚钱的 - 科普篇 【2016-02-12】科学边界的胡思乱想 【2016-02-10】关于判断力-兼谈IT评论界冥顽不化的愚蠢 【2016-02-09】话术 【2016-02-08】红包大战的杂谈 【2016-02-05】谈谈写作这点事 【2016-02-04】了不起的网易 【2016-02-03】没逻辑，真可怕 【2016-02-01】学会止损 【2016-01-31】如何应对并发(6) - 琐碎的日常 【2016-01-29】一年之计在于春 【2016-01-28】奇点临近 【2016-01-26】能力不到，难做好人 【2016-01-25】今天聊聊表情包 【2016-01-23】帝吧出征，其实也挺好 【2016-01-22】从网景到chrome 【2016-01-21】曾经的中国互联网 【2016-01-20】从校园到职场 - 谈谈艺多不压身 【2016-01-19】知易行难与抓大放小 - 不止写给百度 【2016-01-18】外行人谈股市 【2016-01-17】杀人游戏 【2016-01-15】论大V的自我修养 【2016-01-14】商旅服务的水有多深 【2016-01-13】百度搜索推广先行赔付计划（有错必改） 【2016-01-12】贴吧的水有多深 【2016-01-11】萧衍空函定荆州 【2016-01-10】技术选型的一些考虑 【2016-01-09】文章删除的一点说明 【2016-01-07】赢得次数多，不如一把赢得大 【2016-01-06】再谈隐性成本 【2016-01-05】闲谈隐性成本（太多人的思维盲区） 【2016-01-04】浅谈领导力之- 赏罚分明 【2016-01-03】翻翻旧账，关于国产当自强 【2016-01-02】媒体传播的本质就是骗人 【2016-01-01】开上帝视角，其实你也能 【2015-12-31】谈谈产品和运营 - 所谓细节的探讨 【2015-12-30】今夜我们谈谈金融 【2015-12-29】如果你的朋友圈很low 【2015-12-28】如何应对并发(5) - 关键的关键，是认识负载 【2015-12-24】怎样成为一名黑客 【2015-12-22】很抱歉，我不友善 【2015-12-21】我知道你说的都对，但是。。。 【2015-12-20】职场通病之 - 别把自己当小受 【2015-12-19】职场通病之 - 坐守金山不自知 【2015-12-17】说个”扯蛋”的话题 【2015-12-16】浅谈领导力之 - 乾坤独断还是兼听则明？ 【2015-12-15】浅谈领导力之二 - 授权与放权 【2015-12-14】海外华人建国史 【2015-12-13】外行谈征信 【2015-12-12】从E租宝被查谈常识 【2015-12-11】验证码是个什么鬼 【2015-12-10】从校园到职场 - 再谈切忌照本宣科 【2015-12-09】键盘常胜将军 【2015-12-08】越南游戏市场简述 之续 【2015-12-07】浅谈关于领导力之一 - 识人之能 【2015-12-04】越南游戏市场简述 【2015-12-03】从历史中讲创业的韧性 【2015-11-30】创业与投资之 - 价值观 【2015-11-27】caoz谈能力成长 - 分享的技巧 【2015-11-26】感恩节快乐 【2015-11-25】谈谈个人价值及平台红利 【2015-11-24】从一则预测谈起 - 别用臆断代替求证 【2015-11-23】从校园到职场 - 信用与操守伴你一生 【2015-11-22】从CNZZ历史讲创业与打工的区别 【2015-11-21】如何应对并发(4) - 分布式数据库及反范式设计 【2015-11-20】如何应对并发(3) - 需求裁剪 【2015-11-19】信息不对称套利之 - 羊毛党 【2015-11-18】如何应对并发(2) - 请求合并及异步处理 【2015-11-17】如何应对并发(1) - 关于数据索引 【2015-11-16】谈谈产品和运营 - 什么是需求（下） 【2015-11-15】从校园到职场 - 说说求职这点事 【2015-11-14】谈谈产品和运营 - 什么是需求（中） 【2015-11-13】谈谈产品和运营 - 什么是需求（上） 【2015-11-12】谈谈产品及运营 - 如何避免一厢情愿 【2015-11-11】提升智商表现，切忌一厢情愿 【2015-11-10】所谓坚持 【2015-11-09】奇葩商业运营案例精选(1) 【2015-11-08】从校园到职场 你的目标是什么 【2015-11-07】从习近平访新，谈谈中新关系 【2015-11-06】caoz谈能力成长 - 取舍之道 【2015-11-05】谈谈创业这点事(10) 【2015-11-04】谈谈创业这点事(9) 【2015-11-03】谈谈创业这点事(8) 【2015-11-02】目标客户定位及宣传方向选择 【2015-11-01】节操与道德绑架 【2015-10-31】企业服务，机会还是陷阱 【2015-10-30】跨界与沟通 【2015-10-29】知识分享，如何待价而沽 【2015-10-28】谈谈创业这点事(7) 【2015-10-27】从校园到职场 - 不要轻易给自己定性 【2015-10-26】凛冬将至 【2015-10-23】运营相关问题杂谈 【2015-10-20】10月20日杂谈 【2015-10-18】偏见的由来-选择性阅读 【2015-10-17】从校园到职场 - 切勿陷入照本宣科 【2015-10-15】caoz谈能力成长系列 - 机会来自于担当 【2015-10-13】caoz谈能力成长 - 归纳与总结 【2015-10-12】caoz谈能力成长系列 - 提问的技术 【2015-10-10】一则经典技术面试题目的解读 【2015-10-09】从校园到职场 - 不要躲在舒适区 【2015-10-08】关于互联网时代的自助旅游 【2015-10-07】从青蒿素说一下专利与知识产权[更新] 【2015-10-06】从青蒿素说一下专利与知识产权 【2015-10-05】从校园到职场之一 -说说实习这点事 【2015-10-04】关于做人，以及做企业的闲聊 【2015-10-03】关于做人的闲聊 【2015-10-02】台湾原住民的由来-历史隐藏的枭雄 【2015-10-01】再谈技术的价值 【2015-09-30】关于技术合伙人的话题 【2015-09-29】创业公司如何做好信息安全(下) 【2015-09-28】创业公司如何做好信息安全（上） 【2015-09-27】信息安全常识科普 【2015-09-26】套利，最“容易”的赚钱创业手段 【2015-09-25】扒一扒香港黑社会 【2015-09-24】说说社交与人脉 【2015-09-22】喂喂，说好的节操呢！ 【2015-09-21】【旧文重贴】谈谈商业分析的思维养成 【2015-09-20】撰写商业计划书的一些误区和建议 【2015-09-19】分享即学习 【2015-09-18】紧急通知，您的苹果手机可能已经安装了木马软件 【2015-09-17】一个草根站长的逆袭之旅 【2015-09-16】好文推荐- 美图秀秀的爱特分享内容 【2015-09-15】关于产品与技术沟通的一些建议 【2015-09-13】谈谈社交网络的历史 【2015-09-12】谈谈创业这点事(6) 【2015-09-11】谈谈创业这点事(5) 【2015-09-10】史上最简单的推荐系统设计 【2015-09-09】南洋抗日的一些历史 【2015-09-08】说一下媚俗的价值观 【2015-09-06】回答一些读者的消息 【2015-09-05】谈谈创业这点事(4) 【2015-09-04】再谈信息不对称 【2015-09-03】关于抗日纪念的碎碎念 【2015-09-02】谈谈创业这点事(3) 【2015-09-01】谈谈创业这点事(2) 【2015-08-31】谈谈创业这点事(1) 【2015-08-29】谈谈信息不对称 【2015-08-28】开篇语  ","date":"2020-06-13T00:00:00Z","permalink":"https://simonhux.com/p/%E6%9B%B9%E6%94%BF%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95/","title":"曹政文章目录"},{"content":"前言  如果愿意用隐私来交换便捷性或者效率的话，很多情况下他们是愿意这么做的。\n​\t——百度·李彦宏\n NAS全称 Network Attached Storage ，字面意思是：网络附加存储，说白话就是一台属于自己私人去中心化服务器，可以存储音乐、电影、照片等数据，可以做网盘，能做远程下载，能做影音服务器等等等你想让NAS做任何你想解决的方案。相对于家用主机①更低的功耗②24小时待机，两个特点。成熟的NAS产品像群晖、威联通可能二三十瓦功耗，低功耗硬件DIY黑群晖30瓦到40瓦不等。如果你对瓦数没什么概念，电视机顶盒的功耗一般15瓦左右，笔记本大约60 瓦左右。低功耗主要还是在省电方面实在。\nNAS 最大的特性是去中心化，我们用NAS寻找解决方案的目的是为了掌控自己所产生的信息化数据，对数据拥有绝对的处决权，而不是追求数据的安全性。\n不好理解举个例子：你买一辆电动车，你可以任意处置它。你想明天骑明天就一定能骑，没有人能约束你。但你没法保证今晚窃·格瓦拉他不会来光顾你家院子，所以你对安全性没法保障。但是没了处决权，比如共享单车运营商只要明天他不然你骑，你就百分之百骑不了。\n再回到安全，信息化安全它是一个相对概念。任何数据只要信息化都百分百不安全，举个例子，密码管理器LastPass，把所有密码都放在服务端。好比把全部鸡蛋放在一个篮子里。去中心化考虑的是处置权，而不是安全性。此处恰好引用百度·李彦宏，在2018年3月中国高层发展论坛所讲述的那句话。\n此篇文章并非是 UNRAID、OpenMediaVault（OMV） 、FreeNAS等 NAS 系统，而是在 Linux 下一套可行性解决方案，其中斐讯 N1 满载6瓦左右，我家云满载10瓦左右\n关于 关于配置 关于固件选择 N1：Armbian 我家云：OpenWrt\n“反向操作”？并没有。从配置上看，我家云更适合组 NAS（OMV），挂硬盘，速率也高。但众所周知，我家云也叫掉盘云。硬盘用着用着会突然掉线，系统识别不到硬盘。掉盘是需要通过硬改才可以解决，参考F大：我家云硬盘供电的三个BUG（掉盘的主要元凶）如是是用 FTP 进行文件传输发热量大且噪音也是非常大。如果是拆掉外壳，可体验风扇噪音最大化。\nN1，安装过几次 OMV，参考书生86，Armbian 成功安装 OMV5 方法，但都失败了。退而求其次，选择 Armbian 系统安装 Docker 容器。 N1 也是散热问题，在某些环境下 CPU 最高达到48℃，但相比我家云没有噪音。\nN1是在同时跑5个 Docker 容器 47℃，而我家云只跑了一个 OpenWrt 就 46℃\n斐讯 N1 篇 镜像：Armbian_20.02.0_Aml-s9xxx_buster_5.4.28-amlogic-flippy-32+.img\nDocker：Portainer、File Browser、Aria2、Nginx\n移动硬盘：斐讯 H1 外壳+ HTS725050A7E630 500G\nN1刷入 armbian 和安装 Docker 不再此赘述，详细请查看最“不正经”的盒子斐讯 N1\n \n挂载移动硬盘 获取磁盘的 UUID 1  blkid   通常 /dev/sda1 为移动硬盘，例如我的\n编辑 fstab 1  vi /etc/fstab   按i进行修改，把硬盘载到 /media 目录下，当然这个可以挂载根目录任意一个文件夹下\n1  UUID=2530EFAFAE6D5583 /media ntfs defaults,nofail 0 2   改好后依次按返回键 :wq 保存退出。注意别少了冒号\nreboot重启，验证移动硬盘是否挂载到 /media 下\nFile Browser 版本选择 原版作者停止项目开发，👉详细请戳这里\n荒野无灯大神在原版基础上增加更细致化功能，👉详细请戳这里，80x86/filebrowser\n在此选择荒野无灯大神版\n安装 File Browser  打开SSH工具，输入以下代码  1  docker run -it --restart always -d --name filebrowser --net=host -e PUID=1000 -e PGID=100 -e WEB_PORT=8081 -v /var/lib/filebrowser:/config -v /media/docker/filebrowser:/myfiles --mount type=tmpfs,destination=/tmp 80x86/filebrowser:2.9.1-arm64    注意\nv /media/docker/filebrowser 此处对应的是移动硬盘，改成你想要放置File Browser目录的外接硬盘地址\n2.9.1-arm64 amd64和 arm64 需要单独使用tag，n1是arm64架构\n​\tamd64：2.9.1-amd64 ​\tarm64：2.9.1-arm64\n 设置 File Browser 容器设置   进入Portainer\n  点击filebrowser，选择Dupllcate/Edit\n  添加端口为8081\n  修改NetWork为bridge\n  点击Deploy the contalner部署容器\n  勾选filebrowser点击Restart，重启容器\n  File Browser 设置 在浏览器输入 Armbian IP:8081\n用户名和密码默认为：admin\n修改为中文  settings → Language →中文(简体)→ UPDATE 全局设置→用户默认设置→语言→中文(简体)→更新 用户管理→设置→语言→中文(简体)→保存  docker 命令行秘籍 禁用 2FA 1  docker exec -ti filebrowser sh -c \u0026#39;s6-svc -d /etc/services.d/fb \u0026amp;\u0026amp; su -s /bin/sh -c \u0026#34;filebrowser users update 用户名 --otp.disable\u0026#34; app \u0026amp;\u0026amp; s6-svc -u /etc/services.d/fb\u0026#39;   修改密码 1  docker exec -ti filebrowser sh -c \u0026#39;s6-svc -d /etc/services.d/fb \u0026amp;\u0026amp; su -s /bin/sh -c \u0026#34;filebrowser users update 用户名 --password 新密码\u0026#34; app \u0026amp;\u0026amp; s6-svc -u /etc/services.d/fb\u0026#39;   查看被封印的 IP 1  docker exec -ti filebrowser sh -c \u0026#39;s6-svc -d /etc/services.d/fb \u0026amp;\u0026amp; su -s /bin/sh -c \u0026#34;filebrowser logs ls\u0026#34; app \u0026amp;\u0026amp; s6-svc -u /etc/services.d/fb\u0026#39;    修改密码失败可以用此命令也可以在设置→Failed Logs查看\n 解除封印 1  docker exec -ti filebrowser sh -c \u0026#39;s6-svc -d /etc/services.d/fb \u0026amp;\u0026amp; su -s /bin/sh -c \u0026#34;filebrowser logs rm 被封禁的IP\u0026#34; app \u0026amp;\u0026amp; s6-svc -u /etc/services.d/fb\u0026#39;    解除IP后可进行对密码修改\n 主要功能展示 右键菜单总览 重新载入、切换任务面板、复制文件名、复制外部链接、查看媒体信息、查看文件信息、制作种子、制作缩略图、提取字母、解压缩、密码重命名、重命名、权限修改、删除\n媒体信息、文件信息 缩略图 MarkDown 编辑预览 压缩文件、APK文件预览，文本、代码等文件编辑 移动端调用本地播放器 安装 Samba 拉取镜像 1  docker run -d --restart=always -p 137:137/udp -p 138:138/udp -p 139:139 -p 445:445 -p 445:445/udp --hostname \u0026#39;Armbian\u0026#39; -v /media:/share/folder elswork/samba -u \u0026#34;用户名:密码\u0026#34; -s \u0026#34;mycloud:/share/folder:rw:用户名\u0026#34;    Armbian：可改成你想要的名称\nmycloud：为共享文件夹名称\n/media：共享的目录，改成你的移动硬盘目录\n 访问 Samba 1  \\\\Armbian IP\\mycloud   映射到电脑 此电脑或资源管理器\n此时已经映射到电脑里\n与 File Browser重叠？ 重叠 但 Samba 是映射整个 /media 目录。而 File Browser 映射 /media/docker/filebrowser 目录\n下面的 Aria2 下载器，如果是把下载文件夹建立 /media 目录下 Samba 是可以直接访问\n如果需要流媒体播放，如 nPlayer 是直接可以通过 SMB 进行访问\n安装 Aria2 拉取镜像 1 2 3 4 5 6 7 8 9  docker run -d \\  --name aria2 \\  -e GUI=on \\  -e RPC_PASSWORD=123456 \\  -p 6800:6800 \\  -p 8089:80 \\  -v /media/docker/aria2/downloads:/media/docker/aria2/downloads \\  -v /media/docker/aria2/config:/media/docker/aria2/config \\  lstcml/aria2    -e RPC_PASSWORD=123456 \\ #设置你的密码\n-p 6800:6800 \\ #如果需要从外网管理你的下载需要主路由做观看映射\n-p 8089:80 \\ #需要主路由上做端口映射\n-v ~/aria2/downloads:/ #设置下载目录，冒号两边一致\n-v ~/aria2-downloads:/downloads \\ #设置配置文件目录，冒号两边一致\n 进入 Arai2 在浏览器输入Armbian IP:8089即可见证奇迹\n测速 这是20MB的带满，22点左右测试，基本跑满带宽\n获取更多的 Tracker http://edam.top/tk/，trackers_all，获取并生成\nhttps://trackerslist.com/#/zh\n设置 Tracker   连接超时时间和服务器超时时间都设置为3秒，但 Tracker 过多时不需要60秒重新连接\n  把连接全部复制到 BT 服务器地址里\n  安装 Nginx 可用于建站，这里用作于引导页\n拉取镜像 1  docker run --name nginx -p 8080:80 -v /media/docker/www:/usr/share/nginx/html:ro -d nginx    -v /media/docker/www 这里同样可以是任意目录\n 上传源文件到 www 目录 进入网页 在浏览器输入Armbian IP:8080即可见证奇迹\n我家云篇  镜像：L1-Pro_Openwrt_R20.4.8_k5.4.32-flippy-34+o.img USB-A公对公刷机线 驱动：DriverAssitant_v4.6 线刷工具：AndroidTool  我家云相对于斐讯N1刷机，更加简单，更加直接。显示器、U盘甚至是网线都不需要，只需要一条公对公刷机线即可无脑刷机\n \n刷机 安装驱动 双击 DriverInstall.exe 运行程序，点击 驱动安装 按钮安装驱动。期间任何弹窗安装都点击是\n将设备进入准备刷机模式 注意：刷过的机器和未刷过的机器会有一些区别，请务必认真阅读仔细操作\n 双击 AndroidTool.exe 运行程序，请务必确认打开后自己电脑中软件显示的内容和以下图片一致\n   将双公头线插入设备的2.0接口 用回形针一直戳 RESET ，或者拆机按着 RESET 不放。插上电源 等待刷机工具显示 发现一个 MASKROM 设备 后松开回形针。\n 如果是初次刷机的用户 软件提示的是发现一个 LOADER 设备\n此时点击 高级功能 ，点击 进入 Maskrom  按钮\n软件显示 发现一个 MASKROM 设备 后就可以回到 下载镜像 页面准备刷机了\n将固件刷入机器   选择要刷入的固件\n  执行\n  拔掉电源，拔掉 USB 线。插上电源，尽情体验\nOpenWrt 设置 默认IP： 192.168.1.1，默认密码： password 如果主路由或光猫也用192.168.1.1这个 IP 地址的话，我家云就直连电脑，不要经过主路由或光猫\n还是熟悉的配方，还是原来的味道。其它设置如接口— LAN 、防火墙规则、 SmartDNS 等请参考之前的文章。\n这里要提一下：当某个机场在圈内无法订阅时，先用PLUS+飞出去，再用插件PassWall订阅\nMTU 值设置 网络→接口→LAN→高级设置→重设 MTU\n F大在帖子说明\n无意中发现，当采用单臂主路由时，如果wan口的mtu大于1472，则用ifconfig命令查看eth0的mtu是1536，但1536应该是不太正常的。所以建议把wan口的mtu改成1472\n 合理调整openwrt MTU值：https://www.right.com.cn/forum/thread-147203-1-1.html\nOpenWrt 在线升级方法 此方法可以完整无损保留之前配置，相对于 N1 备份、重做、重刷、恢复简单\n1 2 3 4 5 6 7 8 9 10 11  1. 把update-beikeyun-openwrt.sh 和 线刷包img文件(解压后的)用winscp上传至我家云openwrt系统里的/mnt/mmcblk0p4目录 2. ssh连入openwrt 3. cd /mnt/mmcblk0p4 4. ls -l update-l1pro-openwrt.sh 如果文件权限不是 -rwxr-xr-x的话，运行 chmod 755 update-l1pro-openwrt.sh 5. 运行以下命令： ./update-l1pro-openwrt.sh【空格】 【img文件名】，回车。 例如： ./update-l1pro-openwrt.sh L1-Pro_Openwrt_R20.4.8_k5.4.35-flippy-35+o.img 6. 脚本执行完毕，reboot命令重启，稍等一分多钟，over   原理：第一次线刷时预留了2个分区： mmcblk0p3 、 mmcblk0p4 ，其中 p3 分区就是备用的 rootfs 分区，每运行一次升级脚本，就会把新的 rootfs 写到该预留分区，然后原 rootfs 分区被切换成备用分区，再升级一次又换回来，就是这样滚动进行的\nUSB 转 RJ45 接口 此举可以让 N1 或者我家云多出一个 WAN 口\n刷机之前如果插上 USB 网卡的话，刷好机后就可以使用 wan 了，推荐配合8153网卡 做主路由， lan-wan 转发速率接近 900m\n+版和+o版的区别 +版对 CPU 占用率过高，可以跑满带宽\n+o版开启 flow offlooading 加速，会有较低的 CPU 占用率，可以跑满带宽。但同时也会产生负优化，如死机，断流，断网等等等小毛病\n+版适合旁路由，+o版适合主路由。但机器各体制不同，也可能是方向操作\n后记 OpenWrt 有非常高的可玩性，很多 OpenWrt 内置了很多插件，如qBittorrent、Samba、Aria2、Docker CE、内网穿刺、微信推送等等等。\n一个可刷入 OpenWrt 设备就可以满足多样化需求，多一个类似的设备是为了少折腾，有比较良好的稳定性。在 Docker 下折腾最大的好处是可以快速删除、安装容器，不用重新做盘安装新的镜像。而在只有 OpenWrt 系统下，如果操作不当，可能需要重做 OpenWrt 系统重新刷入 EMMC 。如果只是为了科学上网单独的 OpenWrt 更适合，如果是多样化需求在 Armbian Linux 下安装 Docker 更方便。\n","date":"2020-05-03T00:00:00Z","image":"https://simonhux.com/p/%E8%BD%BB%E5%9E%8B-nas-openwrt-%E7%BB%84%E5%90%88/bg_hu12b0c03588f2744c08efb9492900fc2f_1694806_120x120_fill_box_smart1_2.png","permalink":"https://simonhux.com/p/%E8%BD%BB%E5%9E%8B-nas-openwrt-%E7%BB%84%E5%90%88/","title":"轻型 NAS + OpenWrt 组合"},{"content":"前言 在Docker安装OpenWrt文中只是粗略提到旁路由设置，并没有深入探讨OpenWrt旁路由是如何进行设置。此文以四种方案去探讨旁路由模式与分析，祝君玩的开心\n总体介绍 下文【旁路由】代指旁路由设备，如N1，PI\n新手入手建议: 方案1 \u0026gt; 方案2\n根据自己网络需求，选择适合的方案。\n同时先以方案1为基础，逐步熟悉与学习 旁路由设置。避免一下子设置全面崩溃。\n方案1 :(新手建议) 个体设备，通过设置 【旁路由】 为网关， 独自通过 【旁路由】 上网\n 应用场景  个别PC﹑个别手机需要通过 【旁路由】 上网，其他设备不需要   优点  学习简单，折腾旁路由时，不影响其他人上网 私密性，能够规限 特定设备以旁路由模式上网   缺点  面对多设备，每个设备都需单独设置    方案2 :(不动光猫设置方法) 【旁路由】 接上路由后， 【旁路由】强制接管 dhcp，主路由不需设置ip\n当拔除 【旁路由】 并重启路由后，主路由接管重新dhcp\n 应用场景  家中所有设备都有需要 (包括有线/Wifi) ，访客手机通过 Wifi 亦可以   优点  学习相较容易，不会更改原网络设备的设置 适应性强 ， 能够不动光猫﹑路由器下设置成功 全局性， 旁路由强制接管DHCP下，内网设备都以旁路由模式上网 更换模式容易，拔除旁路由并重启路由后，内网设备恢复原来网络模式   缺点  相对方案一，需要更多学习时间。 有些主路由强势不让接管    具体教程 方案1 (新手建议)  N1刷机后，在网络—接口—LAN处修改  协议选择静态地址 IPV4填入与主路由相同网段（不冲突即可，这个地址就是进入OpenWrt管理界面地址） 网关填写成主路由IP DNS填写成主路由IP 底部DHCP服务器勾选忽略此接口 IPV6设置有选项的地方改成停用 其他默认并保存，保存\u0026amp;应用    需要连接N1使用的设备IP填写成主路由相同网段（不冲突即可），网关和DNS填写成N1的IP即可，同理DNS可以填写多个  示例：       方案2 (不动光猫设置方法) 示例：\n N1刷机后，在网络—接口—LAN处修改  设置方法与方案一同理   忽略此接口：不要勾上  在【 高级设置 】 中勾选动态DHCP，勾选强制 ipv4子网掩码：255.255.255.0 DHCP选项 设置 ： 3,你的N1地址和6,你的N1地址  如：3,192.168.0.166（请用英文输入法输入 ,）  6,192.168.0.166（请用英文输入法输入 ,）      保存，保存\u0026amp;应用 设置完，重启N1 和 主路由，N1 接管DHCP   注意：拔除 N1 并 重启路由后 ，主路由重新接管 DHCP  其它旁路由方案 修改光猫方案 路由器 设置 【旁路由】 为该路由器网关，该路由器下所有内网设备都通过 【旁路由】 上网\n N1刷机后在网络—接口—LAN处修改  选择静态地址 IPV4填入与光猫相同网段（不冲突即可）， 网关填写成光猫IP， DNS填写成光猫IP， 底部DHCP服务器填勾选忽略接口， 其他默认并保存，保存\u0026amp;应用 接入光猫LAN口 此时光猫为主路由负责拨号   进入光猫后台关闭LAN口DHCP模式 二级路由中将WAN接口设置成静态地址  IP填写成光猫相同网段（不冲突即可） 网关和DNS填写成N1的IP即可，同时在二级路由LAN设置成DHCP模式    示例\n该方案优缺点：\n 应用场景  家中所有设备都有需要 (包括有线/Wifi) ，访客手机通过 Wifi 亦可以。   优点  全局性，该路由器下所有内网设备都能 以旁路由模式上网 ，无需每台单独设置 。   缺点  学习较复杂，对内网设备影响性较大。由于旁路由接管主路由DHCP， 因此折腾可能会影响他人正常上网（因为 【旁路由】 作为 该路由器网关）。    带Wifi功能OpenWrt固件方案 按照方案一方法设置，关闭DHCP服务器。设置好固件无线，模式为AC或Legacy，频宽为5GHz，信道为36(5180MHz)或者更高\n连接N1Wifi所有设备即可【旁路由】上网，无需其它操作\n该方案优缺点：\n 应用场景:  所有可连接此Wifi设备   优点：  相比上文两个方案是新手更优解决方案   缺点：  Wifi性能薄弱，一些设备不定时会断连，“穿墙”近乎=0    后记 上述方法只是抛砖引玉，理解了其中的原理，玩法是很灵活的\n","date":"2020-04-08T00:00:00Z","image":"https://simonhux.com/p/openwrt-%E6%97%81%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%BC%8F/bg_hub396a9b3c0ea0243d6f1a17688705654_317470_120x120_fill_box_smart1_2.png","permalink":"https://simonhux.com/p/openwrt-%E6%97%81%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%BC%8F/","title":"OpenWrt 旁路由模式"},{"content":"前言 斐讯N1装好了Armbian和Docker，接下来就要发挥Docker性能所在。在Docker里安装软路由系统 OpenWrt\n另外此篇文章也适合于主路由是TP-Link、磊科、水星等主流路由器用户\n大体流程 把大象放进冰箱需要几步？1.开冰箱、2.放大象、3.关冰箱\n把长颈鹿放进冰箱要几步？1.开冰箱、2.把大象从冰箱拿出来、3.把长颈鹿放进去、4.关冰箱\n部署Docker版OP要几步？ 1.导入op、2.开启网卡的混杂模式、3.载入pppoe模块、4.创建docker的虚拟网络、5.开启OpenWrt容器\n安装OpenWrt 下载OpenWrt镜像 镜像：Armbian，flippy大神版\n导入OpenWrt文件 登录armbian的ssh，把tar.gz后缀的镜像文件拖入到root目录下\n注意查看文件大小，如果不是0KB就拖入成功，如果拖入失败，可换另一个ssh工具拖入\n请先看附加说明与注意再来操作以下五句命令，以免发生错误\n创建OpenWrt镜像 docker import openwrt-armvirt-64-default-rootfs.tar.gz openwrt:R9.1.20\n开启网卡的混杂模式 ip link set eth0 promisc on\n载入pppoe模块 modprobe pppoe\n创建docker的虚拟网络（OpenWrt网络） docker network create -d macvlan \u0026ndash;subnet=192.168.0.0/24 \u0026ndash;gateway=192.168.0.1 -o parent=eth0 macnet\n开启OpenWrt容器 docker run \u0026ndash;restart always -d \u0026ndash;network macnet \u0026ndash;privileged openwrt:R9.1.20 /sbin/init\n👉 附加说明与注意  第一条命令解释：docker import+文件名称+镜像名称:标签，标签R9.1.11可自定义，可以改为版本号或者日期 第四条命令：subnet=192.168.0.0/24和gateway=192.168.0.1第三位改为你的主路由，如你的主路由是192.168.123.0，那么这里的两个0改为你主路由的123 第五条命令：OpenWrt:R9.1.20要与第一条语句后面OpenWrt:R9.1.20一致 以后更换op版本时，2、3、4命令可不用重复执行，执行过一次即可，除非是重新刷机  设置OpenWrt 登录portainer管理页面，点container找到你的OpenWrt容器(Image为OpenWrt:R9.1.20或者你设置的)，设置OpenWrt\n修改network设置   在bash界面输入vi /etc/config/network命令\n  按i修改网关信息   按图所示，修改好你进行OpenWrtip地址与你的主路由ip地址\n  改好后依次按返回键 :wq保存退出。注意别少了冒号\n  部署好后，点击containers勾选OpenWrt镜像点Restart重启OpenWrt\n  直接输入你设置的ip地址就可登录\n  用户名为root，密码为password\n  配置OpenWrt旁路由 为什么设置OpenWrt为旁路由而不是主路由？ 主路由\n 若光猫负责拨号，就要把光猫由PPPoE拨号模式设成桥接模式bridge，同时要关闭lan的DHCP  因为同一个网内，只允许一个设备开启DHCP，DHCP相当于分配IP地址的功能，不可能同时由两台设备分配地址，否则会出现无法上网情况   光猫要改成桥接模式，并关闭DHCP服务  禁了光猫的DHCP后，电脑用网线连光猫无法登录进去光猫，以后想恢复光猫设置，就要长按光猫复位键！然后就可以电脑用网线连光猫   主路由接管DHCP服务 如果操作（设置）错误，可能会影响他人正常上网  旁路由\n 不动光猫 可接管DHCP，也可不接管DHCP 不会更改原网络设备的设置 随意折腾，不影响他人上网  操作步骤   登录OpenWrt管理页，依次点击：网络—接口—LAN\n  找打基础设置—DHCP 服务器—忽略此口\n  ipv6设置改成停用\n  保存、保存\u0026amp;应用，记得设置完后重启所有设备\n  加自定义防火墙规则   网络—防火墙\n  添加iptables -t nat -I POSTROUTING -o eth0 -j MASQUERADE，并重启防火墙\n  先解释一下这个规则 iptables 修改 NAT 表，使经过 eth0 的网卡的流量的源 IP 伪装成 eth0 的 IP，而且是动态伪装（直接读取 eth0 的 IP 地址）\n为什么要这么做  N1 只配置了一个 LAN 口，WAN 口是没有使用 不加的话，主路由会错误显示N1的IP，N1替谁转发了流量，主路由就会显示为谁的IP flippy帖子里有说，N1作为旁路由时，开启硬加速的情况下，可能会存在微信或者QQ图片打不开等问题，其中具体原因可能就在于N1没有做SNAT，导致回城不经过N1 加上无害，反而可以解决一些奇奇怪怪的问题  04-09更换OpenWrt镜像，一些修改记录  部分OpenWrt版本可能缺少以下两条，缺少的话就复制进去，192.168.0.1改成你主路由ip  option gateway \u0026lsquo;192.168.0.1\u0026rsquo; option dns \u0026lsquo;192.168.0.1 114.114.114.114\u0026rsquo; 图示请参考修改网关信息   更新OpenWrt镜像或者更新，只需要在SSH里执行创建OpenWrt镜像和开启OpenWrt容器即可  ","date":"2020-04-07T00:00:00Z","image":"https://simonhux.com/p/docker-%E5%AE%89%E8%A3%85-openwrt/bg_hu75d2ea559479d9e6a1b565c1ad2d431f_100629_120x120_fill_box_smart1_2.png","permalink":"https://simonhux.com/p/docker-%E5%AE%89%E8%A3%85-openwrt/","title":"Docker 安装 OpenWrt"},{"content":"前言 斐讯N1面世时是以家庭NAS系统和矿机的产品出现的，结果由于NAS软件性能弱，挖矿又因为一些原因服务挂掉，导致一度沦为吃灰的垃圾。 而之后在大神webpad破解了bootloader之后，N1可以刷机了，这样就摆脱了之前没有服务的NAS系统，可玩性和自由性大大增加。\nmonokind大神通过绕过N1的加密增加了对CoreELEC的支持，CoreELEC的轻便化多媒体方案，让N1摇身一变成为一台专门的蓝光视频播放器，不光可以有海报墙和自动字幕匹配，还可以安装youtube（油管）和netflix（奈飞）插件，直接播放这两个平台的视频。\n再之后荒野无灯大神的小钢炮系统、万能游戏机EmuELEC系统、全功能的Armbian Linux系统、flippy大神编译的openwrt接踵而来。\n附一张斐讯N1参数 N1使用晶晨Amlogic S905D为主芯片。\nS905D芯片属于S905系列的最高阶芯片，采用ARM Cortex-A53架构，四核 1.5GHz的CPU\nGPU为5核ARM Mali-450，支持4K@60fps H265/VP9 10bit硬件解码，支持HDR10和HLG HDR。\n2G RAM，8G ROM，支持千兆有线和5G无线\n准备工作 工欲善其事，必先利其器\n硬件装备  N1 电脑 路由器 U盘（TF卡+读卡器8G以上） 网线 键盘 HDMI线、HDMI显示器（如没有HDMI显示器可用VGA转HDMI线进行转接）  软件准备  镜像：Armbian，flippy大神版 写盘工具：BalenaEtcher SSH工具：FinalShell  降级 如已把armbian或者openwrt 或者小钢炮或者coreecle刷入N1的EMMC，这种情况无需降级\n如果是新的N1未经任何操作，请先降级处理\n降级请参考：webpad降级教程或者三千问N1降级教程\n制作 Armbian 的U盘系统 把 U 盘插到电脑，把下载好的 Armbian 镜像解压，把img文件拖入Etcher中，选择好U盘，点击“Flash” 即可\n制作过程中出现的错误，格式化一律关闭取消\n启动 Armbian U盘系统  拔掉电源 插上网线 插上HDMI线 插上U盘 插上键盘  👉 注意：U盘一定要插到靠近HDMI一侧的U口\n插上电源进入线刷模式\n启动 这种情况已经是正常启动\n初次登录系统，输入账号：root回车，输入密码1234回车\n出现这个命令行是需要改一下密码，再输入一遍现在的密码1234回车\n然后输入你自己定义的密码，自己记住就行\n再输入一遍新密码\n当出现这个界面时，ip要记录一下，等下要用SSH工具进行连接\n出现需要新建用户时，按Ctrl+c,再按r键重登\nSSH 连接 N1  打开FinalShell 新建SSH连接 输入主机ip，用户名和密码   写入 EMMC 闪存 在命令行输入/root/install-aml.sh\n耐心等待，然后显示emmc complete即为刷入emmc成功，执行poweroff关机，最后拔U盘重新开机\n更新软件列表、安装所有常用包 F大的无需更换国内源，只需执行 apt-get update\n安装所有常用包 apt install ipset tcpdump pppoe pppoeconf net-tools git dnsmasq cifs-utils tcptraceroute iftop telnet -y\n安装Docker   执行\n curl -fsSL https://get.docker.com -o get-docker.sh sh get-docker.sh --mirror Aliyun    安装需要一段时间，耐心等待，不要进行其他操作\n出现下图表示成功安装docker\n  配置docker镜像加速\n在FinalShell依次找到etc/docker/daemon.json文件\n右键文本编辑器编辑以下内容，保存\n1 2 3  { \u0026#34;registry-mirrors\u0026#34;: [\u0026#34;http://hub-mirror.c.163.com\u0026#34;,\u0026#34;https://docker.mirrors.ustc.edu.cn\u0026#34;,\u0026#34;https://docker.mirrors.ustc.edu.cn\u0026#34;] }   1 2 3 4 5 6 7 8 9 10  其它中国区Docker 镜像加速，更换里面的网址即可 Docker中国区官方镜像 https://registry.docker-cn.com  daocloud镜像站 http://f1361db2.m.daocloud.io  七牛云加速器 https://reg-mirror.qiniu.com     执行命令：systemctl daemon-reload和systemctl restart docker\n重启 Docker 以使配置生效：service docker restart\n安装Docker图形化管理面板：Portainer   执行\n docker volume create portainer_data docker run -d -p 9000:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer:linux-arm64    在浏览器地址栏输入 armbian 的 ip:9000（ip就是SSH显示的ip）\n  正常进入后会弹出新建账户三行的窗口，密码要8位数的。\n然后选择local，点connect，点击containers，如果提示错误，右边无看到有容器，就reboot重启\n  再次在网页浏览器输入armbian的ip:9000登录Portainer，如是以下图所示，则Portainer容器部署成功\n  完整移除容器方法 以后若要完整卸载容器\n 先勾选中容器，然后点Kill，再点Remove 若弹出Automatically remove non-persistent volumes窗口也要勾选 在lmages显示unused未使用的镜像也一样删除  04-06 刷入Armbian 5.77，一些修改记录 镜像 Armbian_5.77_Aml-s905_Ubuntu_bionic_default_5.0.2_20190401.img\n修改dtb配置  把下载好的meson-gxl-s905d-phicomm-n1-xiangsm.dtb文件重命名为meson-gxl-s905d-p230.dtb复制到U盘的dtb文件夹 把U盘的uEnv.ini文件的dtb路径替换为dtb_name=/dtb/meson-gxl-s905d-p230.dtb  安装至EMMC 1  nand-sata-install   替换镜像源   armbian-config—Personal—Mirror\n  或者vim /etc/apt/sources.list\n  1 2 3 4 5 6 7 8 9 10 11  deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic main restricted universe multiverse #deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-security main restricted universe multiverse #deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-security main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-updates main restricted universe multiverse #deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-updates main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-backports main restricted universe multiverse #deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-backports main restricted universe multiverse     更新和升级软件包\n1 2  apt-get update apt-get upgrade   在实际操作过程中，可能由于某个软件包的更新导致文件系统变为只读状态，此时reboot重启后重新更新就可\n  设置时区为北京时间 1  ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \u0026amp;\u0026amp; echo \u0026#34;Asia/Shanghai\u0026#34; \u0026gt; /etc/timezone   执行 date -R 查看时间是否正确\n删除默认 DNS 我希望N1能使用上级路由器提供的DNS\n1  rm /etc/resolvconf/resolv.conf.d/head \u0026amp;\u0026amp; touch /etc/resolvconf/resolv.conf.d/head   在重启系统后，执行 cat /etc/resolv.conf ，查看返回结果是否为你路由器的 DNS，如果是，则表示删除成功，如果不是，则再执行一次删除命令。\n开启 BBR linux-5.0.2 默认用 reno ，需要设置其启用 bbr 。执行以下命令：\n1 2 3  echo \u0026#34;net.core.default_qdisc=fq\u0026#34; \u0026gt;\u0026gt; /etc/sysctl.conf echo \u0026#34;net.ipv4.tcp_congestion_control=bbr\u0026#34; \u0026gt;\u0026gt; /etc/sysctl.conf sysctl -p   通过以下命令检查 BBR 是否启动：\n1 2 3 4 5 6 7 8 9 10 11  sysctl net.ipv4.tcp_available_congestion_control # 返回值应为 net.ipv4.tcp_available_congestion_control = reno cubic bbr sysctl net.ipv4.tcp_congestion_control # 返回值应为 net.ipv4.tcp_congestion_control = bbr sysctl net.core.default_qdisc # 返回值应为 net.core.default_qdisc = fq lsmod | grep bbr # 返回值应包含 tcp_bbr 模块   安装Docker 使用Azure中国的源，无需额外的配置\n1 2  curl -fsSL https://get.docker.com -o get-docker.sh sh get-docker.sh --mirror AzureChinaCloud   安装Portainer 使Portainer自启要在部署命令加一段restart=always\n1 2 3  docker volume create portainer_data docker run -d -p 9000:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer:linux-arm64   04-07使用ddbr恢复官改系统 N1把Armbian系统4.18+的内核刷入eMMC后会改变分区，会改变MAC地址，无法再通过U盘重新覆盖安装回到其它版本，也无法再直接刷回盒子的系统\n这个问题的解决方法两种\n 一种是通过ddbr恢复分区备份 另一种是线刷参考斐讯N1救砖大法  这里采用前者\n网盘里有原版系统ddbr备份包\n  首先按照制作U盘系统的步骤，制作一个能够从U盘正常启动的armbian系统\n 注意系统尽量选择3.x内核的系统，4.x部分需要打dtb网络补丁也可能无法挂载EMMC 经过证实Armbian_flippy大神版可以正常刷入，不会出现无法挂载EMMC    ssh进入后系统后执行指令\n1  ddbr     输入b（backup），在进度条开始后即可Ctrl+C取消。这样可以获取到ddbr备份的文件的名称（不同版本的Armbian备份出来的包名有不同）\n  reboot重启，进入/ddbr目录，可以看到一个*-emmc.img.gz文件，将它的文件名复制下来然后删除该文件。把从网盘下载的原版系统ddbr包上传到该目录，上传完成后把文件名改成刚才复制的文件名。\n  输入ddbr指令，这回键入r（restore），它会询问你是否使用了压缩（DID YOU USED COMPRESSION），选择y即可\n  成功后直接键入\n1  poweroff     拔电拔U盘重启，然后一切就都回到解放前了\n  重启和关机不要直接拔电源，用reboot 、poweroff命令\n04-16不重新刷机，替换内核 上传 img到原系统的某个目录\n例如 /opt, 然后ssh连入，确保/boot目录有足够空间（大约70MB)，用df -h 查看）\n如果/boot的空间不足，则需要删除一部分旧版内核的文件，例如config-* System.map-*\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  cd /opt losetup -f -P Armbian_5.98_Aml-g12_Debian_buster_default_5.3.6-amlogic-flippy-9+.img mkdir p1 p2 mount /dev/loop0p1 p1 mount /dev/loop0p2 p2 cd p1 cp vmlinuz-5.3.6-amlogic-flippy-9+ /boot cp uInitrd-5.3.6-amlogic-flippy-9+ /boot cp initrd.img-5.3.6-amlogic-flippy-9+ /boot # 可选 cp System.map-5.3.6-amlogic-flippy-9+ /boot # 可选 cp config-5.3.6-amlogic-flippy-9+ /boot # 可选 cd ../p2/lib/modules cp -a 5.3.6-amlogic-flippy-9+ /lib/modules cd /boot cp vmlinuz-5.3.6-amlogic-flippy-9+ zImage cp uInitrd-5.3.6-amlogic-flippy-9+ uInitrd sync cd /opt/ umount p1 p2 losetup -D reboot # 重启成功之后： rm -f /boot/*aml-g12* # 删除旧版内核相关文件,可选 rm -rf /lib/modules/*aml-g12* #删除旧版内核模块，可选   04-18线刷恢复EMMC法 准备工作  N1机子一台（系统崩溃了也没关系） USB对公线一条，尽量品质好点的品牌线，某宝9.9以内半米长包邮的很多 准备好WebPad大的2.2线刷包 传送门\u0026gt; USB_Burning_Tool 刷机工具 传送门\u0026gt;  开始刷机  先把USB对公线插上到电脑USB口与N1的第二个口（靠HDMI口），N1不要通电 打开USB_Burning_Tool，导入固件WEBPAD大的2.2的线刷包，验证通过后，出现开始字样 勾选擦除FLASH，不要勾选擦除bootloader USB_Burning_Tool点击开始运行刷机，3秒钟内速度让N1通电 USB_Burning_Tool开始正常识别N1线刷模式，刷机开始 烧录完成后，拔电重启，N1恢复了原来的样子  没有显示器的情况下如何找到盒子IP  进入路由器后台查看 cmd命令arp -a IPhone端 Fing APP Android端 NetXAPP  后记 盒子已经刷入WebPad电视系统，后续刷其它固件步骤也是一样，不过这里是要用遥控器按关机选择线刷模式才可以进去U盘系统。没遥控器的可以下载悟空遥控器APP或者微信小程序简易电视盒子遥控器\n","date":"2020-04-05T00:00:00Z","image":"https://simonhux.com/p/%E6%9C%80%E4%B8%8D%E6%AD%A3%E7%BB%8F%E7%9A%84%E7%9B%92%E5%AD%90-%E6%96%90%E8%AE%AFn1/bg_hu31f1c29c03de038982e80a34dde4a6d3_1085445_120x120_fill_box_smart1_2.png","permalink":"https://simonhux.com/p/%E6%9C%80%E4%B8%8D%E6%AD%A3%E7%BB%8F%E7%9A%84%E7%9B%92%E5%AD%90-%E6%96%90%E8%AE%AFn1/","title":"最“不正经”的盒子 斐讯N1"},{"content":"前言 Windows Terminal 是微软在2019年Build大会上宣布推出的全新开源终端应用，它带来了许多强大的特性，比如多标签页、Unicode 和 UTF-8 字符支持、GPU 加速文本渲染引擎与自定义主题、样式和配置等。\nWindwos Terminal 采用 C++ 开发，基于现代 Windows 应用平台和 UI 框架，同时整合共享的现代化组件，这些共享组件可以在 Windows 任何终端上使用，比如有一个全新的基于 DirectWrite 的文本布局和渲染引擎、一个能够存储 UTF-16 和 UTF-8 的文本缓冲区以及一个 VT 解析器/发射器。\n此外，Windows Terminal 渲染器和输入栈被构建成了可重用的 Windows UI 控件，方便其他开发者将其整合到他们自己的应用中。\nWindows Terminal 项目经理 Kayla Cinnamon 在博客中介绍了终端的各种设置方法\n安装 👉 注意：Windows Terminal需要Windows 10 1903（内部版本18362）或更高版本\ncmd下输入winver可查看当前版本\n打开windows自带的应用商店，搜索Windows Terminal，安装即可\n使用 下载后可以在应用中找到，点击进入可以进入使用，默认开启的首页是Powershell\nWindows Terminal可以在同一窗口代开多个标签页\n个性化配置 每个标签页都可以任意配置应用，可以根据需要加入如anaconda，Git bash，ssh，Ubuntu等terminal，并且已有的terminal也可以根据喜好配置。\n接下来进行DIY吧\n点击选项卡旁边的下拉，会出现以下几个选项，选择settings将会打开profiles.json\n用任意编辑器打开即可，如：Vs Code、Sublime Text、notepad++等等等甚至记事本都可以\n配置文件可以对Windows Terminal进行各种属性的调整\n 全局属性：位于 JSON 最外侧，包含有设置亮暗主题、默认 Profile 等项目的配置。 环境入口 profiles：一个列表，其中包含有 Windows Terminal 下拉菜单中唤起的各种环境（比如打开 PowerShell 环境、WSL 环境或 SSH 至远程服务器的环境……）与各种环境里 Windows Terminal 的显示方案（比如字体、背景、色彩方案等）。 配色主题 schemes：一个配色方案列表，其中包含有 Windows Terminal 在上一项「环境入口」中可以调用的「色彩主题」。 快捷键绑定 keybindings：自定义快捷键。  具体的每一种属性相关的信息，在Github官方库的SettingsSchema.md中都有详细列表。\n根据官方ColorTool推荐使用iTerm2-Color-Schemes\n在 iterm 的主题列表里选择自己喜欢的主题，然后搜索对应的 JSON 配置\n将配置粘贴到 schemes 数组中，修改 profiles 中 powershell 的属性 colorScheme 为你的主题名即可，更多配置详情参考文档\n例如我的配置如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130  // To view the default settings, hold \u0026#34;alt\u0026#34; while clicking on the \u0026#34;Settings\u0026#34; button. // For documentation on these settings, see: https://aka.ms/terminal-documentation  { \u0026#34;$schema\u0026#34;: \u0026#34;https://aka.ms/terminal-profiles-schema\u0026#34;, \u0026#34;defaultProfile\u0026#34;: \u0026#34;{61c54bbd-c2c6-5271-96e7-009a87ff44bf}\u0026#34;, \u0026#34;profiles\u0026#34;: [{ // Make changes here to the powershell.exe profile \t\u0026#34;guid\u0026#34;: \u0026#34;{61c54bbd-c2c6-5271-96e7-009a87ff44bf}\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Windows Terminal\u0026#34;, \u0026#34;commandline\u0026#34;: \u0026#34;powershell.exe\u0026#34;, \u0026#34;hidden\u0026#34;: false, \u0026#34;acrylicOpacity\u0026#34;: 0.75, \u0026#34;background\u0026#34; : \u0026#34;#171717\u0026#34;, \u0026#34;scrollbarState\u0026#34;:\u0026#34;hidden\u0026#34;, \u0026#34;useAcrylic\u0026#34;: true, \u0026#34;startingDirectory\u0026#34;: \u0026#34;.\u0026#34;, \u0026#34;colorScheme\u0026#34;: \u0026#34;cyberpunk\u0026#34; }, { // Make changes here to the cmd.exe profile \t\u0026#34;guid\u0026#34;: \u0026#34;{0caa0dad-35be-5f56-a8ff-afceeeaa6101}\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;cmd\u0026#34;, \u0026#34;commandline\u0026#34;: \u0026#34;cmd.exe\u0026#34;, \u0026#34;hidden\u0026#34;: false }, { \u0026#34;guid\u0026#34;: \u0026#34;{b453ae62-4e3d-5e58-b989-0a998ec441b8}\u0026#34;, \u0026#34;hidden\u0026#34;: false, \u0026#34;name\u0026#34;: \u0026#34;Azure Cloud Shell\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;Windows.Terminal.Azure\u0026#34; } ], // Add custom color schemes to this array \t\u0026#34;schemes\u0026#34;: [{ \u0026#34;name\u0026#34;: \u0026#34;Gruvbox Dark\u0026#34;, \u0026#34;black\u0026#34;: \u0026#34;#1e1e1e\u0026#34;, \u0026#34;red\u0026#34;: \u0026#34;#be0f17\u0026#34;, \u0026#34;green\u0026#34;: \u0026#34;#868715\u0026#34;, \u0026#34;yellow\u0026#34;: \u0026#34;#cc881a\u0026#34;, \u0026#34;blue\u0026#34;: \u0026#34;#377375\u0026#34;, \u0026#34;purple\u0026#34;: \u0026#34;#a04b73\u0026#34;, \u0026#34;cyan\u0026#34;: \u0026#34;#578e57\u0026#34;, \u0026#34;white\u0026#34;: \u0026#34;#978771\u0026#34;, \u0026#34;brightBlack\u0026#34;: \u0026#34;#7f7061\u0026#34;, \u0026#34;brightRed\u0026#34;: \u0026#34;#f73028\u0026#34;, \u0026#34;brightGreen\u0026#34;: \u0026#34;#aab01e\u0026#34;, \u0026#34;brightYellow\u0026#34;: \u0026#34;#f7b125\u0026#34;, \u0026#34;brightBlue\u0026#34;: \u0026#34;#719586\u0026#34;, \u0026#34;brightPurple\u0026#34;: \u0026#34;#c77089\u0026#34;, \u0026#34;brightCyan\u0026#34;: \u0026#34;#7db669\u0026#34;, \u0026#34;brightWhite\u0026#34;: \u0026#34;#e6d4a3\u0026#34;, \u0026#34;background\u0026#34;: \u0026#34;#1e1e1e\u0026#34;, \u0026#34;foreground\u0026#34;: \u0026#34;#e6d4a3\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;OneHalfDark\u0026#34;, \u0026#34;black\u0026#34;: \u0026#34;#282c34\u0026#34;, \u0026#34;red\u0026#34;: \u0026#34;#e06c75\u0026#34;, \u0026#34;green\u0026#34;: \u0026#34;#98c379\u0026#34;, \u0026#34;yellow\u0026#34;: \u0026#34;#e5c07b\u0026#34;, \u0026#34;blue\u0026#34;: \u0026#34;#61afef\u0026#34;, \u0026#34;purple\u0026#34;: \u0026#34;#c678dd\u0026#34;, \u0026#34;cyan\u0026#34;: \u0026#34;#56b6c2\u0026#34;, \u0026#34;white\u0026#34;: \u0026#34;#dcdfe4\u0026#34;, \u0026#34;brightBlack\u0026#34;: \u0026#34;#282c34\u0026#34;, \u0026#34;brightRed\u0026#34;: \u0026#34;#e06c75\u0026#34;, \u0026#34;brightGreen\u0026#34;: \u0026#34;#98c379\u0026#34;, \u0026#34;brightYellow\u0026#34;: \u0026#34;#e5c07b\u0026#34;, \u0026#34;brightBlue\u0026#34;: \u0026#34;#61afef\u0026#34;, \u0026#34;brightPurple\u0026#34;: \u0026#34;#c678dd\u0026#34;, \u0026#34;brightCyan\u0026#34;: \u0026#34;#56b6c2\u0026#34;, \u0026#34;brightWhite\u0026#34;: \u0026#34;#dcdfe4\u0026#34;, \u0026#34;background\u0026#34;: \u0026#34;#282c34\u0026#34;, \u0026#34;foreground\u0026#34;: \u0026#34;#dcdfe4\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;Nord\u0026#34;, \u0026#34;background\u0026#34;: \u0026#34;#2e3440\u0026#34;, \u0026#34;foreground\u0026#34;: \u0026#34;#eceff4\u0026#34;, \u0026#34;brightBlack\u0026#34;: \u0026#34;#2e3440\u0026#34;, \u0026#34;brightBlue\u0026#34;: \u0026#34;#5e81ac\u0026#34;, \u0026#34;brightCyan\u0026#34;: \u0026#34;#8fbcbb\u0026#34;, \u0026#34;brightGreen\u0026#34;: \u0026#34;#a3be8c\u0026#34;, \u0026#34;brightPurple\u0026#34;: \u0026#34;#b48ead\u0026#34;, \u0026#34;brightRed\u0026#34;: \u0026#34;#bf616a\u0026#34;, \u0026#34;brightWhite\u0026#34;: \u0026#34;#eceff4\u0026#34;, \u0026#34;brightYellow\u0026#34;: \u0026#34;#ebcb8b\u0026#34;, \u0026#34;black\u0026#34;: \u0026#34;#2e3440\u0026#34;, \u0026#34;blue\u0026#34;: \u0026#34;#5e81ac\u0026#34;, \u0026#34;cyan\u0026#34;: \u0026#34;#8fbcbb\u0026#34;, \u0026#34;green\u0026#34;: \u0026#34;#a3be8c\u0026#34;, \u0026#34;purple\u0026#34;: \u0026#34;#b48ead\u0026#34;, \u0026#34;red\u0026#34;: \u0026#34;#bf616a\u0026#34;, \u0026#34;white\u0026#34;: \u0026#34;#eceff4\u0026#34;, \u0026#34;yellow\u0026#34;: \u0026#34;#ebcb8b\u0026#34; }, { \u0026#34;name\u0026#34; : \u0026#34;cyberpunk\u0026#34;, \u0026#34;background\u0026#34; : \u0026#34;#332A57\u0026#34;, \u0026#34;black\u0026#34; : \u0026#34;#000000\u0026#34;, \u0026#34;blue\u0026#34; : \u0026#34;#00BFFF\u0026#34;, \u0026#34;brightBlack\u0026#34; : \u0026#34;#6C6C6C\u0026#34;, \u0026#34;brightBlue\u0026#34; : \u0026#34;#1BCCFD\u0026#34;, \u0026#34;brightCyan\u0026#34; : \u0026#34;#99D6FC\u0026#34;, \u0026#34;brightGreen\u0026#34; : \u0026#34;#21F6BC\u0026#34;, \u0026#34;brightPurple\u0026#34; : \u0026#34;#E6AEFE\u0026#34;, \u0026#34;brightRed\u0026#34; : \u0026#34;#FF8AA4\u0026#34;, \u0026#34;brightWhite\u0026#34; : \u0026#34;#FFFFFF\u0026#34;, \u0026#34;brightYellow\u0026#34; : \u0026#34;#FFF787\u0026#34;, \u0026#34;cyan\u0026#34; : \u0026#34;#86CBFE\u0026#34;, \u0026#34;foreground\u0026#34; : \u0026#34;#E5E5E5\u0026#34;, \u0026#34;green\u0026#34; : \u0026#34;#00FBAC\u0026#34;, \u0026#34;purple\u0026#34; : \u0026#34;#DF95FF\u0026#34;, \u0026#34;red\u0026#34; : \u0026#34;#FF7092\u0026#34;, \u0026#34;white\u0026#34; : \u0026#34;#FFFFFF\u0026#34;, \u0026#34;yellow\u0026#34; : \u0026#34;#FFFA6A\u0026#34; } ], // Add any keybinding overrides to this array.  // To unbind a default keybinding, set the command to \u0026#34;unbound\u0026#34;  \u0026#34;keybindings\u0026#34;: [] }   简单解释profiles几个配置：\n1 2 3 4 5 6 7  commandline # 打开时使用的shell，默认是windows的powershell.exe acrylicOpacity # 亚克力效果的调节参数 background # 设置配置文件的背景颜色 scrollbarState # 滚动条的可见性，\u0026#34;visible\u0026#34;，\u0026#34;hidden\u0026#34; useAcrylic # 是否开启亚克力效果默认为false colorScheme # 终端主题，对应schemes下各个name   最终结果 配置环境变量 根据需要可以方便的通过win+R快捷键打开windows terminal终端。\n环境配置步骤 右键【此电脑】，点击【属性】，打开左边的【高级系统配置】 点击【高级】选项卡，打开【环境变量】 打开【新建系统变量】，内容如下所示\n变量名为运行的命令值，自由配置 变量值为Windows Terminal的程序路径\n👉 注意：请把user_name改成自己电脑的用户名\n以下有user_name地方都是一样操作\n添加到右键菜单 获取图标   在Windows Terminal Github repo中下载Terminal.ico\n  复制到C:\\Users\\user_name\\AppData\\Local\\Microsoft\\WindowsApps文件夹里\n  写入注册表   创建一个txt文档，并把档后缀改为reg。文件名随意如wt.reg\n  将如下内容复制到reg里，然后以\u0026quot;管理员权限\u0026quot;运行\n1 2 3 4 5 6 7 8  Windows Registry Editor Version 5.00 [HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\wt] @=\u0026#34;Windows terminal here\u0026#34; \u0026#34;Icon\u0026#34;=\u0026#34;C:\\\\Users\\\\user_name\\\\AppData\\\\Local\\\\Microsoft\\\\WindowsApps\\\\terminal.ico\u0026#34; [HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\wt\\command] @=\u0026#34;C:\\\\Users\\\\user_name\\\\AppData\\\\Local\\\\Microsoft\\\\WindowsApps\\\\wt.exe\u0026#34;     此时右键菜单就多了一个 Windows Terminal here 的选项了！\n但这就结束了吗？\n修改配置 你会发现在任何文件夹打开的 Windows Terminal 都不是当前的目录\n此时需要修改profile.json（如果用了我的配置文件则无需修改）\n在profiles下加入\u0026quot;startingDirectory\u0026quot;: \u0026quot;.\u0026quot;,\n就可以在任意文件夹打开Windows Terminal\n后记 如果想改个名字，不想叫 Windows Terminal Here了怎么办？\n 点击 win+r -\u0026gt; 输入 regedit 打开了注册表文件后 在顶部导航栏，输入替换为：计算机\\HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\wt 在这里改成自己想要的名字  如果想删除右键菜单了怎么办？\n打开注册表，找到 HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\wt 然后把 wt 删除即可\n","date":"2020-04-01T00:00:00Z","image":"https://simonhux.com/p/windows%E6%96%B0%E5%AE%A0%E5%84%BFwindows-terminal/bg_hu73084e49458bf5fe142a54ef239d51a6_316339_120x120_fill_box_smart1_2.png","permalink":"https://simonhux.com/p/windows%E6%96%B0%E5%AE%A0%E5%84%BFwindows-terminal/","title":"Windows\"新宠儿\"：Windows Terminal"}]